import subprocess
# The goal of this script is to use Bowtie2 to align
# the paired reads of the samples of interest to
# the genome index generated by Bowtie2.
# The index is available on the GitHub project repo,
# so it does not need to be regenerated.

# For the purposes of this assignment, we are only aligning the
# reads from one bee brain sample. The rest will come once we 
# are able to parallelize the read filtering and compression on
# an actual cluster.

# We can consider usiing TopHat2 later iin the project, but for
# first diagnostic pass we would rather use the simpler Bowtie2.

### IMPORTANT: RUN THIS SCRIPT FROM ALIGNMENT DIRECTORY

# all the numbers for the 20 bee brain samples
sra_numbers = [
    "SRR13397490", 
    "SRR13397491",
    "SRR13397492", 
    "SRR13397493", 
    "SRR13397494", 
    "SRR13397495", 
    "SRR13397496", 
    "SRR13397497", 
    "SRR13397498", 
    "SRR13397499", 
    "SRR13397500",
    "SRR13397501",
    "SRR13397502",
    "SRR13397503",
    "SRR13397504",
    "SRR13397505",
    "SRR13397506",
    "SRR13397507",
    "SRR13397508",
    "SRR13397509",
    ]

# for now, only aligning the reads from the first bee
for bee in sra_numbers[1:2]:
    print(f"Currently aligning bee {bee}")
    # pull out fwd and rev read directions
    fwd_file = f'../fastq/{bee}_1.fastq'
    rev_file = f'../fastq/{bee}_2.fastq'
    
    # -1 the forward filtered read file
    # -2 the reverse filtered read file
    # --no-unal ignore unaligned reads
    # -p 8 use no more than 8 cores
    # -S name of the .sam file to save the results to
    cmnd = f"bowtie2 -x honeybee -1 {fwd_file} -2 {rev_file} --no-unal -p 8 -S {bee}.sam"
    subprocess.call(cmnd, shell=True)
    
